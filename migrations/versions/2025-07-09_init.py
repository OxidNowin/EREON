"""init

Revision ID: 0ad6950a89eb
Revises:
Create Date: 2025-07-09 17:42:38.177366

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = "0ad6950a89eb"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("email", sa.Text(), nullable=True),
        sa.Column(
            "email_verified",
            sa.Boolean(),
            server_default="false",
            nullable=False,
        ),
        sa.Column("entry_code", sa.CHAR(length=4), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("telegram_id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(
        op.f("ix_user_telegram_id"), "user", ["telegram_id"], unique=False
    )
    op.create_table(
        "referral",
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column("referred_by", sa.BigInteger(), nullable=True),
        sa.Column("code", sa.Text(), nullable=False),
        sa.Column(
            "active", sa.Boolean(), server_default="false", nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["referred_by"],
            ["user.telegram_id"],
            onupdate="CASCADE",
            ondelete="NO ACTION",
        ),
        sa.ForeignKeyConstraint(
            ["telegram_id"],
            ["user.telegram_id"],
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("telegram_id"),
        sa.UniqueConstraint("code"),
    )
    op.create_index(
        op.f("ix_referral_referred_by"),
        "referral",
        ["referred_by"],
        unique=False,
    )
    op.create_index(
        op.f("ix_referral_telegram_id"),
        "referral",
        ["telegram_id"],
        unique=False,
    )
    op.create_table(
        "wallet",
        sa.Column(
            "wallet_id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "currency",
            sa.Enum("USDT", name="wallet_currency_enum", native_enum=False),
            nullable=False,
        ),
        sa.Column(
            "balance",
            sa.DECIMAL(precision=20, scale=6),
            server_default="0.0",
            nullable=False,
        ),
        sa.Column(
            "addresses",
            sa.ARRAY(sa.String()),
            server_default="{}",
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "BLOCKED",
                "ARCHIVED",
                name="wallet_status_enum",
                native_enum=False,
            ),
            server_default="active",
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["telegram_id"],
            ["user.telegram_id"],
            onupdate="CASCADE",
            ondelete="NO ACTION",
        ),
        sa.PrimaryKeyConstraint("wallet_id"),
        sa.UniqueConstraint(
            "currency", "telegram_id", name="uq_wallet_currency_telegram_id"
        ),
    )
    op.create_index(
        op.f("ix_wallet_wallet_id"), "wallet", ["wallet_id"], unique=False
    )
    op.create_table(
        "operation",
        sa.Column(
            "operation_id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("wallet_id", sa.UUID(), nullable=False),
        sa.Column("status", sa.String(length=255), nullable=False),
        sa.Column("operation_type", sa.String(length=255), nullable=False),
        sa.Column("amount", sa.DECIMAL(precision=20, scale=6), nullable=False),
        sa.Column("fee", sa.DECIMAL(precision=20, scale=6), nullable=False),
        sa.Column(
            "total_amount", sa.DECIMAL(precision=20, scale=6), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["wallet_id"],
            ["wallet.wallet_id"],
            onupdate="CASCADE",
            ondelete="NO ACTION",
        ),
        sa.PrimaryKeyConstraint("operation_id"),
    )
    op.create_index(
        op.f("ix_operation_operation_id"),
        "operation",
        ["operation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_operation_wallet_id"),
        "operation",
        ["wallet_id"],
        unique=False,
    )
    op.create_table(
        "cryptocurrency_replenishment",
        sa.Column("tx_id", sa.String(length=255), nullable=False),
        sa.Column("from_address", sa.String(length=255), nullable=False),
        sa.Column("to_address", sa.String(length=255), nullable=False),
        sa.Column(
            "amount", mysql.DECIMAL(precision=20, scale=6), nullable=False
        ),
        sa.Column("crypto_type", sa.String(length=255), nullable=False),
        sa.Column("operation_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["operation_id"],
            ["operation.operation_id"],
            onupdate="CASCADE",
            ondelete="NO ACTION",
        ),
        sa.PrimaryKeyConstraint("tx_id"),
    )
    op.create_index(
        op.f("ix_cryptocurrency_replenishment_tx_id"),
        "cryptocurrency_replenishment",
        ["tx_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_cryptocurrency_replenishment_tx_id"),
        table_name="cryptocurrency_replenishment",
    )
    op.drop_table("cryptocurrency_replenishment")
    op.drop_index(op.f("ix_operation_wallet_id"), table_name="operation")
    op.drop_index(op.f("ix_operation_operation_id"), table_name="operation")
    op.drop_table("operation")
    op.drop_index(op.f("ix_wallet_wallet_id"), table_name="wallet")
    op.drop_table("wallet")
    op.drop_index(op.f("ix_referral_telegram_id"), table_name="referral")
    op.drop_index(op.f("ix_referral_referred_by"), table_name="referral")
    op.drop_table("referral")
    op.drop_index(op.f("ix_user_telegram_id"), table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###
